#!/usr/bin/env python3
"""
Wraps Mozilla's make_dafsa.py script so that we can generate data for unit tests.
"""

import argparse
from pathlib import Path
import sys
from typing import Sequence

__DIR__ = Path(__file__).parent
sys.path.insert(0, str(__DIR__.parent / 'tools'))

from make_dafsa import Dafsa, encode, parse_gperf


def to_php(data: Sequence[int]) -> str:
  output = [
    '<?php',
    '/**',
    ' * automatically generated by scripts/compile-dafsa.py',
    ' */',
    'return [',
  ]
  for i in range(0, len(data), 12):
    row = ', '.join(f'0x{byte:02x}' for byte in data[i : i + 12])
    output.append(f'    {row},')
  output.extend((
    '];',
    ''
  ))

  return '\n'.join(output)


if __name__ == '__main__':

  parser = argparse.ArgumentParser()
  parser.add_argument(
    '-r', '--reverse', action='store_true',
    help='Outputs a reverse lookup byte array.'
  )
  parser.add_argument(
    'infile', nargs='?', type=argparse.FileType('r'),
    default=sys.stdin
  )
  parser.add_argument(
    'outfile', nargs='?', type=argparse.FileType('w'),
    default=sys.stdout
  )
  args = parser.parse_args()

  _, words = parse_gperf(args.infile)
  if args.reverse:
    words = [w[-2::-1] + w[-1] for w in words]

  dafsa = Dafsa.from_tld_data(words)
  data = encode(dafsa)
  code = to_php(data)
  args.outfile.write(code)
